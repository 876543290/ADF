{
	"name": "ods_to_integration_fact",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Purchasing_PurchaseOrderLines",
						"type": "DatasetReference"
					},
					"name": "sourcePurchaseOrderLins"
				},
				{
					"dataset": {
						"referenceName": "Purchasing_PurchaseOrders",
						"type": "DatasetReference"
					},
					"name": "sourcePurchaseOrder"
				},
				{
					"dataset": {
						"referenceName": "Integration_Supplier_Staging",
						"type": "DatasetReference"
					},
					"name": "intSupplier"
				},
				{
					"dataset": {
						"referenceName": "Integration_StockItem_Staging",
						"type": "DatasetReference"
					},
					"name": "intStockItem"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Integration_Purchase_Staging",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				},
				{
					"name": "surrogateKey1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PurchaseOrderLineID as integer,",
				"          PurchaseOrderID as integer,",
				"          StockItemID as integer,",
				"          OrderedOuters as integer,",
				"          Description as string,",
				"          ReceivedOuters as integer,",
				"          PackageTypeID as integer,",
				"          ExpectedUnitPricePerOuter as decimal(18,2),",
				"          LastReceiptDate as date,",
				"          IsOrderLineFinalized as boolean,",
				"          LastEditedBy as integer,",
				"          LastEditedWhen as timestamp,",
				"          ingestTime as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourcePurchaseOrderLins",
				"source(output(",
				"          PurchaseOrderID as integer,",
				"          SupplierID as integer,",
				"          OrderDate as date,",
				"          DeliveryMethodID as integer,",
				"          ContactPersonID as integer,",
				"          ExpectedDeliveryDate as date,",
				"          SupplierReference as string,",
				"          IsOrderFinalized as boolean,",
				"          Comments as string,",
				"          InternalComments as string,",
				"          LastEditedBy as integer,",
				"          LastEditedWhen as timestamp,",
				"          ingestTime as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourcePurchaseOrder",
				"source(output(",
				"          {Supplier Staging Key} as integer,",
				"          {WWI Supplier ID} as integer,",
				"          Supplier as string,",
				"          Category as string,",
				"          {Primary Contact} as string,",
				"          {Supplier Reference} as string,",
				"          {Payment Days} as integer,",
				"          {Postal Code} as string,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> intSupplier",
				"source(output(",
				"          {Stock Item Staging Key} as integer,",
				"          {WWI Stock Item ID} as integer,",
				"          {Stock Item} as string,",
				"          Color as string,",
				"          {Selling Package} as string,",
				"          {Buying Package} as string,",
				"          Brand as string,",
				"          Size as string,",
				"          {Lead Time Days} as integer,",
				"          {Quantity Per Outer} as integer,",
				"          {Is Chiller Stock} as boolean,",
				"          Barcode as string,",
				"          {Tax Rate} as decimal(18,3),",
				"          {Unit Price} as decimal(18,2),",
				"          {Recommended Retail Price} as decimal(18,2),",
				"          {Typical Weight Per Unit} as decimal(18,3),",
				"          Photo as binary,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> intStockItem",
				"sourcePurchaseOrderLins, sourcePurchaseOrder join(sourcePurchaseOrderLins@PurchaseOrderID == sourcePurchaseOrder@PurchaseOrderID,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> join1",
				"select1, intSupplier join(SupplierID == {WWI Supplier ID},",
				"     joinType:'left',",
				"     broadcast: 'auto')~> join2",
				"select2, intStockItem join(StockItemID == {WWI Stock Item ID},",
				"     joinType:'left',",
				"     broadcast: 'auto')~> join3",
				"join1 select(mapColumn(",
				"          PurchaseOrderID = sourcePurchaseOrderLins@PurchaseOrderID,",
				"          StockItemID,",
				"          OrderedOuters,",
				"          ReceivedOuters,",
				"          PackageTypeID,",
				"          SupplierID,",
				"          IsOrderFinalized",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"join2 select(mapColumn(",
				"          PurchaseOrderID,",
				"          StockItemID,",
				"          OrderedOuters,",
				"          ReceivedOuters,",
				"          PackageTypeID,",
				"          SupplierID,",
				"          IsOrderFinalized,",
				"          {Supplier Staging Key}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"join3 select(mapColumn(",
				"          WWIPurchaseOrderID = PurchaseOrderID,",
				"          OrderedOuters,",
				"          ReceivedOuters,",
				"          Package = PackageTypeID,",
				"          WWISupplierID = SupplierID,",
				"          IsOrderFinalized,",
				"          {Supplier Staging Key},",
				"          {Stock Item Staging Key},",
				"          WWIStockItemID = StockItemID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 keyGenerate(output(PurchaseKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Purchase Staging Key} as long,",
				"          {Date Key} as date,",
				"          {Supplier Key} as integer,",
				"          {Stock Item Key} as integer,",
				"          {WWI Purchase Order ID} as integer,",
				"          {Ordered Outers} as integer,",
				"          {Ordered Quantity} as integer,",
				"          {Received Outers} as integer,",
				"          Package as string,",
				"          {Is Order Finalized} as boolean,",
				"          {WWI Supplier ID} as integer,",
				"          {WWI Stock Item ID} as integer,",
				"          {Last Modified When} as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {Purchase Staging Key} = PurchaseKey,",
				"          {Supplier Key} = {Supplier Staging Key},",
				"          {Stock Item Key} = {Stock Item Staging Key},",
				"          {WWI Purchase Order ID} = WWIPurchaseOrderID,",
				"          {Ordered Outers} = OrderedOuters,",
				"          {Received Outers} = ReceivedOuters,",
				"          Package,",
				"          {Is Order Finalized} = IsOrderFinalized,",
				"          {WWI Supplier ID} = WWISupplierID,",
				"          {WWI Stock Item ID} = WWIStockItemID",
				"     )) ~> sink3"
			]
		}
	}
}