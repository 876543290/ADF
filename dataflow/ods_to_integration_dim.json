{
	"name": "ods_to_integration_dim",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Purchasing_Suppliers",
						"type": "DatasetReference"
					},
					"name": "sourceSuppliers"
				},
				{
					"dataset": {
						"referenceName": "Application_People",
						"type": "DatasetReference"
					},
					"name": "sourcePeople"
				},
				{
					"dataset": {
						"referenceName": "Warehouse_StockItems",
						"type": "DatasetReference"
					},
					"name": "sourceStockItem"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Integration_Supplier_Staging",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "Integration_StockItem_Staging",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "surrogateKeySupplier"
				},
				{
					"name": "surrogateKeyStockItem"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SupplierID as integer,",
				"          SupplierName as string,",
				"          SupplierCategoryID as integer,",
				"          PrimaryContactPersonID as integer,",
				"          AlternateContactPersonID as integer,",
				"          DeliveryMethodID as integer,",
				"          DeliveryCityID as integer,",
				"          PostalCityID as integer,",
				"          SupplierReference as string,",
				"          BankAccountName as string,",
				"          BankAccountBranch as string,",
				"          BankAccountCode as string,",
				"          BankAccountNumber as string,",
				"          BankInternationalCode as string,",
				"          PaymentDays as integer,",
				"          InternalComments as string,",
				"          PhoneNumber as string,",
				"          FaxNumber as string,",
				"          WebsiteURL as string,",
				"          DeliveryAddressLine1 as string,",
				"          DeliveryAddressLine2 as string,",
				"          DeliveryPostalCode as string,",
				"          DeliveryLocation as binary,",
				"          PostalAddressLine1 as string,",
				"          PostalAddressLine2 as string,",
				"          PostalPostalCode as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp,",
				"          ingestTime as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourceSuppliers",
				"source(output(",
				"          PersonID as integer,",
				"          FullName as string,",
				"          PreferredName as string,",
				"          SearchName as string,",
				"          IsPermittedToLogon as boolean,",
				"          LogonName as string,",
				"          IsExternalLogonProvider as boolean,",
				"          HashedPassword as binary,",
				"          IsSystemUser as boolean,",
				"          IsEmployee as boolean,",
				"          IsSalesperson as boolean,",
				"          UserPreferences as string,",
				"          PhoneNumber as string,",
				"          FaxNumber as string,",
				"          EmailAddress as string,",
				"          Photo as binary,",
				"          CustomFields as string,",
				"          OtherLanguages as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp,",
				"          ingestTime as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourcePeople",
				"source(output(",
				"          StockItemID as integer,",
				"          StockItemName as string,",
				"          SupplierID as integer,",
				"          ColorID as integer,",
				"          UnitPackageID as integer,",
				"          OuterPackageID as integer,",
				"          Brand as string,",
				"          Size as string,",
				"          LeadTimeDays as integer,",
				"          QuantityPerOuter as integer,",
				"          IsChillerStock as boolean,",
				"          Barcode as string,",
				"          TaxRate as decimal(18,3),",
				"          UnitPrice as decimal(18,2),",
				"          RecommendedRetailPrice as decimal(18,2),",
				"          TypicalWeightPerUnit as decimal(18,3),",
				"          MarketingComments as string,",
				"          InternalComments as string,",
				"          Photo as binary,",
				"          CustomFields as string,",
				"          Tags as string,",
				"          SearchDetails as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp,",
				"          ingestTime as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourceStockItem",
				"sourceSuppliers, sourcePeople join(PrimaryContactPersonID == PersonID,",
				"     joinType:'left',",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          WWISupplierID = SupplierID,",
				"          Supplier = SupplierName,",
				"          Category = SupplierCategoryID,",
				"          SupplierReference,",
				"          PaymentDays,",
				"          PostalCode = PostalPostalCode,",
				"          ValidFrom = sourceSuppliers@ValidFrom,",
				"          ValidTo = sourceSuppliers@ValidTo,",
				"          ingestTime = sourceSuppliers@ingestTime,",
				"          PrimaryContact = FullName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"sourceStockItem select(mapColumn(",
				"          WWIStockItemID = StockItemID,",
				"          StockItem = StockItemName,",
				"          Color = ColorID,",
				"          SellingPackage = UnitPackageID,",
				"          BuyingPackage = OuterPackageID,",
				"          Brand,",
				"          Size,",
				"          LeadTimeDays,",
				"          QuantityPerOuter,",
				"          IsChillerStock,",
				"          Barcode,",
				"          TaxRate,",
				"          UnitPrice,",
				"          RecommendedRetailPrice,",
				"          TypicalWeightPerUnit,",
				"          Photo,",
				"          ValidFrom,",
				"          ValidTo,",
				"          ingestTime",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select1 keyGenerate(output(SupplierKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKeySupplier",
				"select2 keyGenerate(output(StockItemKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKeyStockItem",
				"surrogateKeySupplier sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Supplier Staging Key} as integer,",
				"          {WWI Supplier ID} as integer,",
				"          Supplier as string,",
				"          Category as string,",
				"          {Primary Contact} as string,",
				"          {Supplier Reference} as string,",
				"          {Payment Days} as integer,",
				"          {Postal Code} as string,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {Supplier Staging Key} = SupplierKey,",
				"          {WWI Supplier ID} = WWISupplierID,",
				"          Supplier,",
				"          Category,",
				"          {Primary Contact} = PrimaryContact,",
				"          {Supplier Reference} = SupplierReference,",
				"          {Payment Days} = PaymentDays,",
				"          {Postal Code} = PostalCode,",
				"          {Valid From} = ValidFrom,",
				"          {Valid To} = ValidTo",
				"     )) ~> sink1",
				"surrogateKeyStockItem sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Stock Item Staging Key} as integer,",
				"          {WWI Stock Item ID} as integer,",
				"          {Stock Item} as string,",
				"          Color as string,",
				"          {Selling Package} as string,",
				"          {Buying Package} as string,",
				"          Brand as string,",
				"          Size as string,",
				"          {Lead Time Days} as integer,",
				"          {Quantity Per Outer} as integer,",
				"          {Is Chiller Stock} as boolean,",
				"          Barcode as string,",
				"          {Tax Rate} as decimal(18,3),",
				"          {Unit Price} as decimal(18,2),",
				"          {Recommended Retail Price} as decimal(18,2),",
				"          {Typical Weight Per Unit} as decimal(18,3),",
				"          Photo as binary,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {Stock Item Staging Key} = StockItemKey,",
				"          {WWI Stock Item ID} = WWIStockItemID,",
				"          {Stock Item} = StockItem,",
				"          Color,",
				"          {Selling Package} = SellingPackage,",
				"          {Buying Package} = BuyingPackage,",
				"          Brand,",
				"          Size,",
				"          {Lead Time Days} = LeadTimeDays,",
				"          {Quantity Per Outer} = QuantityPerOuter,",
				"          {Is Chiller Stock} = IsChillerStock,",
				"          Barcode,",
				"          {Tax Rate} = TaxRate,",
				"          {Unit Price} = UnitPrice,",
				"          {Recommended Retail Price} = RecommendedRetailPrice,",
				"          {Typical Weight Per Unit} = TypicalWeightPerUnit,",
				"          Photo,",
				"          {Valid From} = ValidFrom,",
				"          {Valid To} = ValidTo",
				"     )) ~> sink2"
			]
		}
	}
}