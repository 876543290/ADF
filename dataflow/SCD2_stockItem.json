{
	"name": "SCD2_stockItem",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Integration_StockItem_Staging",
						"type": "DatasetReference"
					},
					"name": "sourceStockItemINT"
				},
				{
					"dataset": {
						"referenceName": "Dimension_StockItem",
						"type": "DatasetReference"
					},
					"name": "DimentionStockItem"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Dimension_StockItem",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "Dimension_StockItem",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "ExistingRows"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Stock Item Staging Key} as integer,",
				"          {WWI Stock Item ID} as integer,",
				"          {Stock Item} as string,",
				"          Color as string,",
				"          {Selling Package} as string,",
				"          {Buying Package} as string,",
				"          Brand as string,",
				"          Size as string,",
				"          {Lead Time Days} as integer,",
				"          {Quantity Per Outer} as integer,",
				"          {Is Chiller Stock} as boolean,",
				"          Barcode as string,",
				"          {Tax Rate} as decimal(18,3),",
				"          {Unit Price} as decimal(18,2),",
				"          {Recommended Retail Price} as decimal(18,2),",
				"          {Typical Weight Per Unit} as decimal(18,3),",
				"          Photo as binary,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourceStockItemINT",
				"source(output(",
				"          {Stock Item Key} as integer,",
				"          {WWI Stock Item ID} as integer,",
				"          {Stock Item} as string,",
				"          Color as string,",
				"          {Selling Package} as string,",
				"          {Buying Package} as string,",
				"          Brand as string,",
				"          Size as string,",
				"          {Lead Time Days} as integer,",
				"          {Quantity Per Outer} as integer,",
				"          {Is Chiller Stock} as boolean,",
				"          Barcode as string,",
				"          {Tax Rate} as decimal(18,3),",
				"          {Unit Price} as decimal(18,2),",
				"          {Recommended Retail Price} as decimal(18,2),",
				"          {Typical Weight Per Unit} as decimal(18,3),",
				"          Photo as binary,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimentionStockItem",
				"DimentionStockItem select(mapColumn(",
				"          {SQL_Stock Item Key} = {Stock Item Key},",
				"          {SQL_WWI Stock Item ID} = {WWI Stock Item ID},",
				"          {SQL_Stock Item} = {Stock Item},",
				"          SQL_Color = Color,",
				"          {SQL_Selling Package} = {Selling Package},",
				"          {SQL_Buying Package} = {Buying Package},",
				"          SQL_Brand = Brand,",
				"          SQL_Size = Size,",
				"          {SQL_Lead Time Days} = {Lead Time Days},",
				"          {SQL_Quantity Per Outer} = {Quantity Per Outer},",
				"          {SQL_Is Chiller Stock} = {Is Chiller Stock},",
				"          SQL_Barcode = Barcode,",
				"          {SQL_Tax Rate} = {Tax Rate},",
				"          {SQL_Unit Price} = {Unit Price},",
				"          {SQL_Recommended Retail Price} = {Recommended Retail Price},",
				"          {SQL_Typical Weight Per Unit} = {Typical Weight Per Unit},",
				"          SQL_Photo = Photo,",
				"          {SQL_Valid From} = {Valid From},",
				"          {SQL_Valid To} = {Valid To},",
				"          {SQL_Lineage Key} = {Lineage Key}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"derivedColumn3, select1 lookup({WWI Stock Item ID} == {SQL_WWI Stock Item ID},",
				"     multiple: true,",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 filter(!isNull({WWI Stock Item ID})) ~> ExistingRows",
				"ExistingRows select(mapColumn(",
				"          {SQL_Stock Item Key},",
				"          {SQL_WWI Stock Item ID},",
				"          {SQL_Stock Item},",
				"          SQL_Color,",
				"          {SQL_Selling Package},",
				"          {SQL_Buying Package},",
				"          SQL_Brand,",
				"          SQL_Size,",
				"          {SQL_Lead Time Days},",
				"          {SQL_Quantity Per Outer},",
				"          {SQL_Is Chiller Stock},",
				"          SQL_Barcode,",
				"          {SQL_Tax Rate},",
				"          {SQL_Unit Price},",
				"          {SQL_Recommended Retail Price},",
				"          {SQL_Typical Weight Per Unit},",
				"          SQL_Photo,",
				"          {SQL_Valid From},",
				"          {SQL_Valid To},",
				"          {SQL_Lineage Key}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 derive({SQL_Valid To} = currentUTC(),",
				"          SQL_Color = iifNull(SQL_Color, 'N/A'),",
				"          {SQL_Selling Package} = iifNull({SQL_Selling Package}, 'N/A'),",
				"          {SQL_Buying Package} = iifNull({SQL_Buying Package}, 'N/A'),",
				"          SQL_Brand = iifNull(SQL_Brand, 'N/A'),",
				"          SQL_Size = iifNull(SQL_Size, 'N/A'),",
				"          SQL_Barcode = iifNull(SQL_Barcode, 'N/A')) ~> derivedColumn1",
				"derivedColumn1 alterRow(updateIf(1==1)) ~> alterRow1",
				"sourceStockItemINT derive({Lineage Key} = 0,",
				"          Color = iifNull(Color, 'N/A'),",
				"          {Selling Package} = iifNull({Selling Package}, 'N/A'),",
				"          {Buying Package} = iifNull({Buying Package}, 'N/A'),",
				"          Brand = iifNull(Brand, 'N/A'),",
				"          Size = iifNull(Size, 'N/A'),",
				"          Barcode = iifNull(Barcode, 'N/A')) ~> derivedColumn2",
				"sourceStockItemINT derive({Lineage Key} = 0) ~> derivedColumn3",
				"derivedColumn2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Stock Item Key} as integer,",
				"          {WWI Stock Item ID} as integer,",
				"          {Stock Item} as string,",
				"          Color as string,",
				"          {Selling Package} as string,",
				"          {Buying Package} as string,",
				"          Brand as string,",
				"          Size as string,",
				"          {Lead Time Days} as integer,",
				"          {Quantity Per Outer} as integer,",
				"          {Is Chiller Stock} as boolean,",
				"          Barcode as string,",
				"          {Tax Rate} as decimal(18,3),",
				"          {Unit Price} as decimal(18,2),",
				"          {Recommended Retail Price} as decimal(18,2),",
				"          {Typical Weight Per Unit} as decimal(18,3),",
				"          Photo as binary,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {WWI Stock Item ID},",
				"          {Stock Item},",
				"          Color,",
				"          {Selling Package},",
				"          {Buying Package},",
				"          Brand,",
				"          Size,",
				"          {Lead Time Days},",
				"          {Quantity Per Outer},",
				"          {Is Chiller Stock},",
				"          Barcode,",
				"          {Tax Rate},",
				"          {Unit Price},",
				"          {Recommended Retail Price},",
				"          {Typical Weight Per Unit},",
				"          Photo,",
				"          {Valid From},",
				"          {Valid To},",
				"          {Lineage Key}",
				"     )) ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Stock Item Key} as integer,",
				"          {WWI Stock Item ID} as integer,",
				"          {Stock Item} as string,",
				"          Color as string,",
				"          {Selling Package} as string,",
				"          {Buying Package} as string,",
				"          Brand as string,",
				"          Size as string,",
				"          {Lead Time Days} as integer,",
				"          {Quantity Per Outer} as integer,",
				"          {Is Chiller Stock} as boolean,",
				"          Barcode as string,",
				"          {Tax Rate} as decimal(18,3),",
				"          {Unit Price} as decimal(18,2),",
				"          {Recommended Retail Price} as decimal(18,2),",
				"          {Typical Weight Per Unit} as decimal(18,3),",
				"          Photo as binary,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['Stock Item Key'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {Stock Item Key} = {SQL_Stock Item Key},",
				"          {WWI Stock Item ID} = {SQL_WWI Stock Item ID},",
				"          {Stock Item} = {SQL_Stock Item},",
				"          Color = SQL_Color,",
				"          {Selling Package} = {SQL_Selling Package},",
				"          {Buying Package} = {SQL_Buying Package},",
				"          Brand = SQL_Brand,",
				"          Size = SQL_Size,",
				"          {Lead Time Days} = {SQL_Lead Time Days},",
				"          {Quantity Per Outer} = {SQL_Quantity Per Outer},",
				"          {Is Chiller Stock} = {SQL_Is Chiller Stock},",
				"          Barcode = SQL_Barcode,",
				"          {Tax Rate} = {SQL_Tax Rate},",
				"          {Unit Price} = {SQL_Unit Price},",
				"          {Recommended Retail Price} = {SQL_Recommended Retail Price},",
				"          {Typical Weight Per Unit} = {SQL_Typical Weight Per Unit},",
				"          Photo = SQL_Photo,",
				"          {Valid From} = {SQL_Valid From},",
				"          {Valid To} = {SQL_Valid To},",
				"          {Lineage Key} = {SQL_Lineage Key}",
				"     )) ~> sink2"
			]
		}
	}
}